WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

keyword = {
    "type" | "dec" | "def" |
    "chan" | "let" | "do" | "in" | "pass" | "begin" | "loop" | "telltypes" |
    "either" | "recursive" | "iterative" | "self"
}

name = @{ !(keyword ~ !("_" | ASCII_ALPHANUMERIC)) ~ (ASCII_ALPHA ~ ("_" | ASCII_ALPHANUMERIC)*) }

program     = { SOI ~ (type_def | declaration | definition)* ~ EOI }
type_def    = { "type" ~ name ~ type_params ~ "=" ~ typ }
declaration = { "dec" ~ name ~ ":" ~ typ }
definition  = { "def" ~ name ~ "=" ~ expression }

expression_list = { expression  ~ ("," ~ expression )* ~ ","? }
name_list = { name  ~ ("," ~ name )* ~ ","? }
typ_list = { typ  ~ ("," ~ typ )* ~ ","? }
pattern_list = { pattern  ~ ("," ~ pattern )* ~ ","? }

typ           = { typ_name | typ_chan | typ_send | typ_receive | typ_either | typ_choice | typ_break | typ_continue | typ_recursive | typ_iterative | typ_self | typ_loop | typ_send_type | typ_recv_type }
typ_name      = { name ~ type_args }
typ_chan      = { "chan" ~ typ }
typ_send      = { "(" ~ typ_list ~ ")" ~ typ }
typ_receive   = { "[" ~ typ_list ~ "]" ~ typ }
typ_either    = { "either" ~ "{" ~ ("." ~ name ~ typ ~ ","?)* ~ "}" }
typ_choice    = { "{" ~ ("." ~ name ~ typ_branch ~ ","?)* ~ "}" }
typ_break     = { "!" }
typ_continue  = { "?" }
typ_recursive = { "recursive" ~ loop_label ~ typ }
typ_iterative = { "iterative" ~ loop_label ~ typ }
typ_self      = { "self" ~ loop_label }
typ_loop      = { "loop" ~ loop_label }
typ_send_type = { "(" ~ "type" ~ name_list ~ ")" ~ typ }
typ_recv_type = { "[" ~ "type" ~ name_list ~ "]" ~ typ }

type_params = { ("<" ~ name_list ~ ">")? }
type_args   = { ("<" ~ typ_list ~ ">")? }

typ_branch           = { typ_branch_then | typ_branch_receive | typ_branch_recv_type }
typ_branch_then      = { "=>" ~ typ }
typ_branch_receive   = { "(" ~ typ_list ~ ")" ~ typ_branch }
typ_branch_recv_type = { "(" ~ "type" ~ name_list ~ ")" ~ typ_branch }

annotation        = { (":" ~ typ)? }
pattern           = { pattern_name | pattern_receive | pattern_continue | pattern_recv_type }
pattern_name      = { name ~ annotation }
pattern_receive   = { "(" ~ pattern_list ~ ")" ~ pattern }
pattern_continue  = { "!" }
pattern_recv_type = { "(" ~ "type" ~ name_list ~ ")" ~ pattern }

expression = { expr_let | expr_do | expr_fork | application | construction | ("{" ~ expression ~ "}") }
expr_let   = { "let" ~ pattern ~ "=" ~ expression ~ "in" ~ expression }
expr_do    = { "do" ~ "{" ~ process ~ "}" ~ "in" ~ expression }
expr_fork  = { "chan" ~ name ~ annotation ~ "{" ~ process ~ "}" }

construction   = { cons_begin | cons_loop | cons_then | cons_send | cons_receive | cons_choose | cons_either | cons_break | cons_send_type | cons_recv_type }
cons_then      = { expr_fork | expr_let | expr_do | application | ("{" ~ expression ~ "}") }
cons_send      = { "(" ~ expression_list ~ ")" ~ construction }
cons_receive   = { "[" ~ pattern_list ~ "]" ~ construction }
cons_choose    = { "." ~ name ~ construction }
cons_either    = { "{" ~ ("." ~ name ~ cons_branch ~ ","?)* ~ "}" }
cons_break     = { "!" }
cons_begin     = { "begin" ~ loop_label ~ construction }
cons_loop      = { "loop" ~ loop_label }
cons_send_type = { "(" ~ "type" ~ typ_list ~ ")" ~ construction }
cons_recv_type = { "[" ~ "type" ~ name_list ~ "]" ~ construction }

cons_branch           = { cons_branch_then | cons_branch_receive | cons_branch_recv_type }
cons_branch_then      = { "=>" ~ expression }
cons_branch_receive   = { "(" ~ pattern_list ~ ")" ~ cons_branch }
cons_branch_recv_type = { "(" ~ "type" ~ name_list ~ ")" ~ cons_branch }

application     = { name ~ apply }
apply           = { apply_begin | apply_loop | apply_send | apply_choose | apply_either | apply_send_type | apply_noop }
apply_noop      = { "" }
apply_send      = { "(" ~ expression_list ~ ")" ~ apply }
apply_choose    = { "." ~ name ~ apply }
apply_either    = { "{" ~ ("." ~ name ~ apply_branch ~ ","?)* ~ "}" }
apply_begin     = { "begin" ~ loop_label ~ apply }
apply_loop      = { "loop" ~ loop_label }
apply_send_type = { "(" ~ "type" ~ typ_list ~ ")" ~ apply }

apply_branch           = { apply_branch_then | apply_branch_receive | apply_branch_continue | apply_branch_recv_type }
apply_branch_then      = { name ~ "=>" ~ expression }
apply_branch_receive   = { "(" ~ pattern_list ~ ")" ~ apply_branch }
apply_branch_continue  = { "!" ~ "=>" ~ expression }
apply_branch_recv_type = { "(" ~ "type" ~ name_list ~ ")" ~ apply_branch }

process        = { proc_let | proc_pass | proc_telltypes | command | proc_noop }
proc_let       = { "let" ~ pattern ~ "=" ~ expression ~ process }
proc_pass      = { "pass" }
proc_telltypes = { "telltypes" ~ process }
proc_noop      = { "" }

command       = { name ~ cmd }
cmd           = { cmd_link | cmd_send | cmd_receive | cmd_choose | cmd_either | cmd_break | cmd_continue | cmd_begin | cmd_loop | cmd_send_type | cmd_recv_type | cmd_then }
cmd_then      = { process }
cmd_link      = { "<>" ~ expression }
cmd_send      = { "(" ~ expression_list ~ ")" ~ cmd }
cmd_receive   = { "[" ~ pattern_list ~ "]" ~ cmd }
cmd_choose    = { "." ~ name ~ cmd }
cmd_either    = { "{" ~ cmd_branches ~ "}" ~ pass_process? }
cmd_break     = { "!" }
cmd_continue  = { "?" ~ process }
cmd_begin     = { "begin" ~ loop_label ~ cmd }
cmd_loop      = { "loop" ~ loop_label }
cmd_send_type = { "(" ~ "type" ~ typ_list ~ ")" ~ cmd }
cmd_recv_type = { "[" ~ "type" ~ name_list ~ "]" ~ cmd }

pass_process = { proc_let | proc_pass | proc_telltypes | command }

cmd_branches         = { ("." ~ name ~ cmd_branch)* }
cmd_branch           = { cmd_branch_then | cmd_branch_receive | cmd_branch_continue | cmd_branch_recv_type }
cmd_branch_then      = { "=>" ~ "{" ~ process ~ "}" }
cmd_branch_receive   = { "(" ~ pattern_list ~ ")" ~ cmd_branch }
cmd_branch_continue  = { "!" ~ "=>" ~ "{" ~ process ~ "}" }
cmd_branch_recv_type = { "(" ~ "type" ~ name_list ~ ")" ~ cmd_branch }

loop_label = { ("@" ~ name)? }
