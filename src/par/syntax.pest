WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

keyword = {
    "type" | "declare" | "define" |
    "chan" | "let" | "do" | "in" | "pass" | "begin" | "loop" | "telltypes" |
    "either" | "recursive" | "iterative" | "self"
}

name = @{ !(keyword ~ !("_" | ASCII_ALPHANUMERIC)) ~ (ASCII_ALPHA ~ ("_" | ASCII_ALPHANUMERIC)*) }

program     = { SOI ~ (type_def | declaration | definition)* ~ EOI }
type_def    = { "type" ~ name ~ "=" ~ typ }
declaration = { "declare" ~ name ~ ":" ~ typ }
definition  = { "define" ~ name ~ "=" ~ expression }

typ           = { typ_name | typ_send | typ_receive | typ_either | typ_choice | typ_break | typ_continue | typ_recursive | typ_iterative | typ_self | typ_loop }
typ_name      = { name }
typ_send      = { "(" ~ typ ~ ")" ~ typ }
typ_receive   = { "[" ~ typ ~ "]" ~ typ }
typ_either    = { "either" ~ "{" ~ ("." ~ name ~ typ)* ~ "}" }
typ_choice    = { "{" ~ (name ~ "=>" ~ typ)* ~ "}" }
typ_break     = { "!" }
typ_continue  = { "?" }
typ_recursive = { "recursive" ~ loop_label ~ typ }
typ_iterative = { "iterative" ~ loop_label ~ typ }
typ_self      = { "self" ~ loop_label }
typ_loop      = { "loop" ~ loop_label }

annotation = { (":" ~ typ)? }

expression = { expr_let | expr_do | expr_fork | application | construction | ("{" ~ expression ~ "}") }
expr_let   = { "let" ~ name ~ annotation ~ "=" ~ expression ~ "in" ~ expression }
expr_do    = { "do" ~ "{" ~ process ~ "}" ~ "in" ~ expression }
expr_fork  = { "chan" ~ name ~ annotation ~ "{" ~ process ~ "}" }

construction = { cons_begin | cons_loop | cons_then | cons_send | cons_receive | cons_choose | cons_either | cons_break }
cons_then    = { expr_fork | expr_let | expr_do | application | ("{" ~ expression ~ "}") }
cons_send    = { "(" ~ expression ~ ")" ~ construction }
cons_receive = { "[" ~ name ~ annotation ~ "]" ~ construction }
cons_choose  = { "." ~ name ~ construction }
cons_either  = { "{" ~ (name ~ cons_branch)* ~ "}" }
cons_break   = { "!" }
cons_begin   = { "begin" ~ loop_label ~ construction }
cons_loop    = { "loop" ~ loop_label }

cons_branch         = { cons_branch_then | cons_branch_receive }
cons_branch_then    = { "=>" ~ expression }
cons_branch_receive = { "[" ~ name ~ annotation ~ "]" ~ cons_branch }

application  = { name ~ apply }
apply        = { apply_begin | apply_loop | apply_send | apply_choose | apply_either | apply_noop }
apply_noop   = { "" }
apply_send   = { "(" ~ expression ~ ")" ~ apply }
apply_choose = { "." ~ name ~ apply }
apply_either = { "{" ~ (name ~ apply_branch)* ~ "}" }
apply_begin  = { "begin" ~ loop_label ~ apply }
apply_loop   = { "loop" ~ loop_label }

apply_branch          = { apply_branch_then | apply_branch_receive | apply_branch_continue }
apply_branch_then     = { name ~ "=>" ~ expression }
apply_branch_receive  = { "[" ~ name ~ annotation ~ "]" ~ apply_branch }
apply_branch_continue = { "?" ~ "=>" ~ expression }

process        = { proc_let | proc_pass | proc_telltypes | command | proc_noop }
proc_let       = { "let" ~ name ~ annotation ~ "=" ~ expression ~ process }
proc_pass      = { "pass" }
proc_telltypes = { "telltypes" }
proc_noop      = { "" }

command      = { name ~ cmd }
cmd          = { cmd_link | cmd_send | cmd_receive | cmd_choose | cmd_either | cmd_break | cmd_continue | cmd_begin | cmd_loop | cmd_then }
cmd_then     = { process }
cmd_link     = { "<>" ~ expression }
cmd_send     = { "(" ~ expression ~ ")" ~ cmd }
cmd_receive  = { "[" ~ name ~ annotation ~ "]" ~ cmd }
cmd_choose   = { "." ~ name ~ cmd }
cmd_either   = { "{" ~ cmd_branches ~ "}" ~ pass_process? }
cmd_break    = { "!" }
cmd_continue = { "?" ~ process }
cmd_begin    = { "begin" ~ loop_label ~ cmd }
cmd_loop     = { "loop" ~ loop_label }

pass_process = { proc_let | proc_pass | command }

cmd_branches        = { (name ~ cmd_branch)* }
cmd_branch          = { cmd_branch_then | cmd_branch_receive | cmd_branch_continue }
cmd_branch_then     = { "=>" ~ "{" ~ process ~ "}" }
cmd_branch_receive  = { "[" ~ name ~ annotation ~ "]" ~ cmd_branch }
cmd_branch_continue = { "?" ~ "=>" ~ "{" ~ process ~ "}" }

loop_label = { ("@" ~ name)? }
