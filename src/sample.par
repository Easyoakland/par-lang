define concat = [left][right] left begin {
  empty?     => right
  item[x] xs => .item(x) xs loop
}

define flatten = [tree] tree begin {
  leaf x      => .item(x).empty!
  node[l][r]? => concat(l loop)(r loop)
}

define listrgb =
  .item(.red!)
  .item(.green!)
  .item(.blue!)
  .empty!

define rgb = [value] value {
  red?   => .red!
  green? => .green!
  blue?  => .blue!
}

define zip = [list][seq] list begin {
  empty? => do {
    seq.close?
  } in .empty!

  item[x] xs => do {
    seq.next[y]
    let y = rgb(y)
  } in .item((x)(y)!) xs loop
}

define zip_old = [list][seq] chan result {
  list begin {
    empty? => {
      seq.close?
      result.empty!
    }
    item[x] => {
      seq.next[y]
      let y = rgb(y)
      result.item((x)(y)!)
      list loop
    }
  }
}

define play = zip(listrgb)
