type Bool  = either { .true!, .false! }
type Color = either { .red!, .green!, .blue! }

type List<T> = recursive either {
  .empty!
  .item(T) self
}

type Seq<T> = iterative {
  close => !
  next  => (T) loop
}

type Mapper<A, B> = iterative {
  close => !
  apply => [A] (B) loop
}

declare mapList: [type A][type B] [List<A>] [Mapper<A, B>] List<B>

define mapList =
  [type A][type B]
  [list][mapper]

  list begin {
    empty? => do {
      mapper.close?
    } in.empty!

    item[x] xs => do {
      mapper.apply(x)[y]
    } in .item(y) xs loop
  }

declare mapSeq: [type A][type B] [Seq<A>] [Mapper<A, B>] Seq<B>

define mapSeq =
  [type A][type B]
  [seq][mapper]
  begin {
    close => do {
      seq.close?
      mapper.close?
    } in !
    next => do {
      seq.next[x]
      mapper.apply(x)[y]
    } in (y) loop
  }

define listrgb =
  .item(.red!)
  .item(.green!)
  .item(.blue!)
  .empty!

define red_forever = begin {
  close => !
  next  => (.red!) loop
}

define rgb = [value: Color] value {
  red?   => .red!
  green? => .green!
  blue?  => .blue!
}

define swap = [bool: Bool] bool {
  true? => .false!
  false? => .true!
}

define true  = chan result { result.true! }
define false = chan result { result.false! }

define bools_forever =
  let bool: Bool = .true! in
  begin {
    close => bool {
      true? => !
      false? => !
    }
    next => do {
      let pair = bool {
        true? => (.true!)(.false!)!
        false? => (.false!)(.true!)!
      }
      pair[output][bool]?
    } in (output) loop
  }

define zip = [list: List<Color>][seq: Seq<Color>] list begin {
  empty? => do {
    seq.close?
  } in .empty!

  item[x] xs => do {
    seq.next[y]
  } in .item((x)(y)!) xs loop
}

define zipped = zip(listrgb)(red_forever)

define zip2 = [type T] [seq1: Seq<T>][seq2: Seq<T>] begin {
  close => do {
    seq1.close?
    seq2.close?
  } in !

  next => do {
    seq1.next[x]
    seq2.next[y]
  } in ((x)(y)!) loop
}
