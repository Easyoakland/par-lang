WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

keyword = { "define" | "chan" | "let" | "pass" | "begin" | "loop" | "in" }

name = @{ !keyword ~ (ASCII_ALPHA ~ ("_" | ASCII_ALPHANUMERIC)*) }

program    = { SOI ~ definition* ~ EOI }
definition = { "define" ~ name ~ "=" ~ expression }

expression = { expr_let | expr_fork | application | construction }
expr_let   = { "let" ~ name ~ "=" ~ expression ~ "in" ~ expression }
expr_fork  = { "chan" ~ name ~ "{" ~ process ~ "}" }

construction = { cons_begin | cons_loop | cons_then | cons_send | cons_receive | cons_choose | cons_either | cons_break }
cons_then    = { expr_fork | application }
cons_send    = { "(" ~ expression ~ ")" ~ construction }
cons_receive = { "[" ~ name ~ "]" ~ construction }
cons_choose  = { "." ~ name ~ construction }
cons_either  = { "{" ~ (name ~ cons_branch)* ~ "}" }
cons_break   = { "!" }
cons_begin   = { "begin" ~ loop_label ~ construction }
cons_loop    = { "loop" ~ loop_label }

cons_branch         = { cons_branch_then | cons_branch_receive }
cons_branch_then    = { "=>" ~ expression }
cons_branch_receive = { "[" ~ name ~ "]" ~ cons_branch }

application  = { name ~ apply }
apply        = { apply_begin | apply_loop | apply_send | apply_choose | apply_either | apply_noop }
apply_noop   = { "" }
apply_send   = { "(" ~ expression ~ ")" ~ apply }
apply_choose = { "." ~ name ~ apply }
apply_either = { "{" ~ (name ~ apply_branch)* ~ "}" }
apply_begin  = { "begin" ~ loop_label ~ apply }
apply_loop   = { "loop" ~ loop_label }

apply_branch          = { apply_branch_then | apply_branch_receive | apply_branch_continue }
apply_branch_then     = { name ~ "=>" ~ expression }
apply_branch_receive  = { "[" ~ name ~ "]" ~ apply_branch }
apply_branch_continue = { "?" ~ "=>" ~ expression }

process   = { proc_let | proc_pass | command }
proc_let  = { "let" ~ name ~ "=" ~ expression ~ process }
proc_pass = { "pass" }

command      = { name ~ cmd }
cmd          = { cmd_link | cmd_send | cmd_receive | cmd_choose | cmd_either | cmd_break | cmd_continue | cmd_begin | cmd_loop | cmd_then }
cmd_link     = { "<>" ~ expression }
cmd_send     = { "(" ~ expression ~ ")" ~ cmd }
cmd_receive  = { "[" ~ name ~ "]" ~ cmd }
cmd_choose   = { "." ~ name ~ cmd }
cmd_either   = { "{" ~ cmd_branches ~ "}" ~ process? }
cmd_break    = { "!" }
cmd_continue = { "?" ~ process }
cmd_begin    = { "begin" ~ loop_label ~ cmd }
cmd_loop     = { "loop" ~ loop_label }
cmd_then     = { process }

cmd_branches        = { (name ~ cmd_branch)* }
cmd_branch          = { cmd_branch_then | cmd_branch_receive | cmd_branch_continue }
cmd_branch_then     = { "=>" ~ "{" ~ process ~ "}" }
cmd_branch_receive  = { "[" ~ name ~ "]" ~ cmd_branch }
cmd_branch_continue = { "?" ~ "=>" ~ "{" ~ process ~ "}" }

loop_label = { name? }
