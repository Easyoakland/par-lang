WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

name   = @{ (ASCII_ALPHA ~ ("_" | ASCII_ALPHANUMERIC)*) }
string = @{ "\"" ~ (!("\"" | "\n" | "\r") ~ ANY)* ~ "\"" }

program    = { SOI ~ definition* ~ EOI }
definition = { "define" ~ name ~ "=" ~ expression }

action  = { send | receive | select | close }
send    = { "(" ~ expression ~ ")" }
receive = { "[" ~ name ~ "]"}
select  = { "." ~ name }
close   = { "[]" }

expression = { string | expr_break | expr_fork | expr_case | reference | construction }
expr_break = { "()" }
expr_fork  = { "chan" ~ name ~ "{" ~ process ~ "}" }
expr_case  = { "{" ~ expr_branches ~ "}" }

reference    = { name ~ actions? }
construction = { actions ~ expression }

expr_branches = { expr_branch* }
expr_branch   = { name ~ "=>" ~ expression }

process  = { proc_let | proc_link | command }
proc_let = { "let" ~ name ~ "=" ~ expression ~ ";" ~ process }

command       = { name ~ proc_apply }
proc_apply    = { proc_link | proc_break | proc_continue | proc_case | proc_pass | proc_action }
proc_link     = { "<>" ~ expression }
proc_break    = { "()" }
proc_continue = { "[]" ~ ";" ~ process }
proc_case     = { "{" ~ proc_branches ~ "}" ~ (";" ~ process)? }
proc_pass     = { "pass" }
proc_action   = { action ~ (proc_apply | (";" ~ process)) }

proc_branches    = { proc_branch* }
proc_branch      = { proc_branch_head ~ "=>" ~ "{" ~ process ~ "}" }
proc_branch_head = { name ~ actions? }

actions = { action ~ actions? }
