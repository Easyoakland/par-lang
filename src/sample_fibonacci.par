type Nat = recursive either {
  .zero!
  .add1 self
}

declare zero: Nat
declare add1: [Nat] Nat
declare drop: [Nat] !
declare copy: [Nat] (Nat)(Nat)!
declare add:  [Nat][Nat] Nat

define zero = .zero!
define add1 = [n] .add1 n

define drop = [n] n begin {
  zero?  => !
  add1 n => n loop
}

define copy = [n] n begin {
  zero?  => (zero)(zero)!
  add1 n => let [n1][n2]? = n loop
    in (add1(n1))(add1(n2))!
}

define add = [n1][n2] n1 begin {
  zero?   => n2
  add1 n1 => add1(n1 loop)
}

type Seq<T> = iterative {
  close => !
  next  => (T) loop
}

declare fibonacci: Seq<Nat>

define fibonacci = do {
  let n1 = zero
  let n2 = add1(zero)
} in begin {
  close => do {
    drop(n1)?
    drop(n2)?
  } in !

  next => do {
    copy(n1)[n0][m1]?
    copy(n2)[n1][m2]?
    let n2 = add(m1)(m2)
  } in (n0) loop
}
